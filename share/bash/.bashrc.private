# add your local .bashrc customization here #shell setting 
function jobcount {
   jobs | wc -l | tr -d " "
}

function mc {
   mkdir $1 && cd $1
}

function genhello {

    if [ x$1 == x"" ]; then
        if [ -e "hello.c" ]; then
            echo "hello.c exits"
            exit 1
        fi
        hello_name="hello.c"
    else
        hello_name="$1"
    fi

    echo \
"#include <stdio.h>

int main(int argc, char *argv[])
{
    printf(\"hello\n\");

    return 0;
}

" >> ${hello_name}
}

function din {
    if [ -z $1 ]; then
        echo "need container's name"
    else
        docker exec -it $1 /bin/bash
    fi
}

function mkcd {
    if [ -z $1 ]; then
        echo "need path"
    else
	mkdir -p $1 && cd $1
    fi
}

tmux_winidx() {
    if [ $TMUX ]; then
        tmp_winidx=`tmux display-message -p '#I'`
        echo "($tmp_winidx)"
    else
        echo "()"
    fi
}

function ssh-add-key {
    haskey=`ssh-add -l | grep "$HOME/.ssh/id_rsa"`
    if [[ x${haskey} = x"" ]]; then
        ssh-add "$HOME/.ssh/id_rsa";
    fi
}

# ssh-agent-procure.bash
# v0.6.4
# ensures that all shells sourcing this file in profile/rc scripts use the same ssh-agent.
# copyright me, now; licensed under the DWTFYWT license.
# get from 'http://superuser.com/questions/141044/sharing-the-same-ssh-agent-among-multiple-login-sessions'

AGENT_HOME=$HOME/.etc/ssh
mkdir -p "$AGENT_HOME"

function ssh-procure-launch-agent {
    eval `ssh-agent -s -a ~/.etc/ssh/ssh-agent-socket`;
    ssh-add-key;
}

if [ -z $SSH_AGENT_PID ] && [ -z $SSH_AUTH_SOCK ]; then
  if [ -e $AGENT_HOME/ssh-agent-socket ] ; then
    SSH_AGENT_PID=`ps -fC ssh-agent |grep 'etc/ssh/ssh-agent-socket' |sed -r 's/^\S+\s+(\S+).*$/\1/'`;
    if [[ $SSH_AGENT_PID =~ [0-9]+ ]]; then
      # in this case the agent has already been launched and we are just attaching to it.
      ##++  It should check that this pid is actually active & belongs to an ssh instance
      export SSH_AGENT_PID;
      SSH_AUTH_SOCK=$AGENT_HOME/ssh-agent-socket; export SSH_AUTH_SOCK;
    else
      # in this case there is no agent running, so the socket file is left over from a graceless agent termination.
      rm $AGENT_HOME/ssh-agent-socket;
      ssh-procure-launch-agent;
    fi;
  else
    ssh-procure-launch-agent;
  fi;
# ssh-agent forward
elif [ -n $SSH_AUTH_SOCK ] && [ x"$SSH_AUTH_SOCK" != x"$AGENT_HOME/ssh-agent-socket" ]; then
    echo -n "" > /dev/null
elif [ -n $SSH_AGENT_PID ]; then
    ssh-add-key;
fi;

set -o vi

#PROMPT_COMMAND=`prompt_command`
if [ x$BYOBU_BACKEN == x"screen" ]; then
    PS1='\u@\h\[\e[1;36m\] \w$(__git_ps1 "\[\e[1;32m\] <%s>\[\e[1;34m\]") \[\e[1;33m\](${WINDOW})\[\033[1;32m\][`jobcount`]\[\e[m\]$ '
else
    PS1='\u@\h\[\e[1;36m\] \w$(__git_ps1 "\[\e[1;32m\] <%s>\[\e[1;34m\]") \[\e[1;33m\]$(tmux_winidx)\[\033[1;32m\][`jobcount`]\[\e[m\]$ '
fi

umask 022

#
# export
#
#   common
export EDITOR="vim"
export CVS_RSH=ssh
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'
export HISTTIMEFORMAT='%F %T '
export MYTOOL="${HOME}/tool"
export PATH="${MYTOOL}/bin:$PATH"
export MANPATH="$MANPATH:/usr/local/share/man:${MYTOOL}/man:${MYTOOL}/share/man"
export LD_LIBRARY_PATH="${HOME}/tool/lib"
export TERM=screen
#color manpage
export PAGER="/usr/bin/less -s"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[0;36m'
export LESS_TERMCAP_md=$'\E[0;36m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[0;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[0;33m'

#locale setting
zh_locale=`locale -a | grep zh_TW.utf8`
if [ -z "${zh_locale}" ]; then
    export LC_ALL="en_US.UTF-8"
else
    export LANG="en_US.UTF-8"
    export LC_NUMERIC="zh_TW.UTF-8"
    export LC_TIME="zh_TW.UTF-8"
    export LC_MONETARY="zh_TW.UTF-8"
    export LC_PAPER="zh_TW.UTF-8"
    export LC_NAME="zh_TW.UTF-8"
    export LC_ADDRESS="zh_TW.UTF-8"
    export LC_TELEPHONE="zh_TW.UTF-8"
    export LC_MEASUREMENT="zh_TW.UTF-8"
    export LC_IDENTIFICATION="zh_TW.UTF-8"
fi

#
# language path
#
#   go
export GOPATH="$HOME/tool/go"
#   git 
export GIT_EDITOR="vim"
#   perl
export PERL5LIB="${MYTOOL}/lib/perl5:${MYTOOL}/lib/perl5/site_perl/5.8.7"
#   python
export PYTHONPATH="${MYTOOL}/lib/python"
#   ruby
export RUBYLIB="${MYTOOL}/lib64/site_ruby/"

alias cd2="cd ../../"
alias cd3="cd ../../../"
alias cd4="cd ../../../../"
alias cd5="cd ../../../../../"
alias cd6="cd ../../../../../../"
alias cdc="cd / && cd -"
alias dir="ls -al"
alias dush="du -sh"
alias codefmt="astyle --style=linux --indent=tab=8"
alias codeqemu="astyle --style=linux --indent=spaces=4"
alias cvsrip="perl -pi -e \"s/^cvs update: .*\n//\""
alias gnb="grep -E -R -n --binary-files=without-match --exclude=\"tags\""
alias gcsize="du -sh ./.git && git gc && du -sh ./.git"
alias m="less -R"
alias marm="make ARCH=arm CROSS_COMPILE=arm-"
alias marm64="make ARCH=arm64 CROSS_COMPILE=aarch64-"
alias makelog="rm -rf log && make 2>&1 | tee log"
alias mlog4="make -j4 2>&1 | tee log"
alias mcm="make clean && make"
alias more="less -R"
alias msroot="mysql -u root -p"
alias ll="ls -alF"
alias llh="ls -alFh"
alias ls="ls -F --color=auto"
alias less="less -R"
alias l="less -R"
alias psme="ps aux | grep $LOGNAME"
alias rm="rm -i"
alias s="screen"
alias vd="vimdiff"
alias vimo="vim -O"
alias wea114="curl -4 wttr.in/Taipei"
alias wea300="curl -4 wttr.in/Hsinchu"

#docker
alias dk="docker"
alias dci="docker commit"
alias dex="docker exec"
alias dim="docker images"
alias dps="docker ps"
alias drm="docker rm"
alias drmi="docker rmi"
alias drs="docker restart"
alias drun="docker run"
alias dst="docker stop"

#work
alias towt="cd ~/repo"
alias totmp="cd /tmp"


# to avoid home is symbolic link issue
# http://unix.stackexchange.com/questions/37376/bash-prompt-when-my-home-directory-is-a-symbolic-link
real_home=`readlink $HOME`
if [[ $PWD == `readlink $HOME`* ]]; then
    new_path="${PWD/${real_home}/${HOME}}"
    cd $new_path
fi


#handle module path if it is installed in default
if [ -f /usr/share/modules/init/bash ] && [ ! -z "$MODULEPATH" ]; then
    . /usr/share/modules/init/bash
fi

if [ ! -z "$MODULEPATH" ]; then
    export MODULEPATH="$HOME/modulefiles:$MODULEPATH"
fi

export PATH=$(printf %s "$PATH" | awk -vRS=: '!a[$0]++' | paste -s -d:)
    
